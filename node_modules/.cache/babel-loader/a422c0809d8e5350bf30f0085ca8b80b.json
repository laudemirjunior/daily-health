{"ast":null,"code":"var _jsxFileName = \"/home/laudemir/\\xC1rea de Trabalho/projeto-gestao-de-habitos/src/components/cardCreate/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { StyleCardCreate } from \"./styles\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"../button/index\";\nimport { TextField } from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardCreate = ({\n  createHabit\n}) => {\n  _s();\n\n  const formSchema = yup.object().shape({\n    name: yup.string().required(\"Nome obrigatório\").matches(\"[A-Z][a-z].* [A-Z][a-z].*\", \"Deve haver somente letras\"),\n    email: yup.string().required(\"E-mail obrigatório\").matches(\"^[a-z0-9][-_.+!#$%&'*/=?^`{|]{0,1}([a-z0-9][-_.+!#$%&'*/=?^`{|]{0,1})*[a-z0-9]@[a-z0-9][-.]{0,1}([a-z][-.]{0,1})*[a-z0-9].[a-z0-9]{1,}([.-]{0,1}[a-z]){0,}[a-z0-9]{0,}$\", \"E-mail inválido\"),\n    password: yup.string().required(\"Senha obrigatória\").min(8, \"A senha deve ter pelo menos 8 caracteres\").matches(\"(?=.*?[A-Z])\", \"Deve haver pelo menos uma letra maiúscula\").matches(\"(?=.*?[a-z])\", \"Deve haver pelo menos uma letra minúscula\").matches(\"(?=.*?[0-9])\", \"Deve haver pelo menos um dígito\").matches(\"(?=.*?[#?!@$%^&*-])\", \"Deve haver pelo menos um caractere especial\").matches(\".{8,}\", \"Deve haver no mínimo oito caracteres\"),\n    confirmPassword: yup.string().required(\"Confirmação da senha obrigatória\").oneOf([yup.ref(\"password\"), null], \"As senhas devem corresponder\")\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(formSchema)\n  });\n\n  const onSubmitFunction = data => {\n    setLogado(true);\n    history.push(`/home/${data.name}`);\n    setObj(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyleCardCreate, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(TextField, { ...register(\"title\"),\n        label: \"Title\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, { ...register(\"category\"),\n        label: \"Category\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, { ...register(\"difficulty\"),\n        label: \"Difficulty\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, { ...register(\"frequency\"),\n        label: \"Frequency\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, { ...register(\"how_much_achieved\"),\n        label: \"How much achieved\",\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardCreate, \"HLC1IFclXfL/K+q6lxeDS/Po7Wk=\", false, function () {\n  return [useForm];\n});\n\n_c = CardCreate;\nexport default CardCreate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardCreate\");","map":{"version":3,"sources":["/home/laudemir/Área de Trabalho/projeto-gestao-de-habitos/src/components/cardCreate/index.jsx"],"names":["StyleCardCreate","useForm","Button","TextField","yup","yupResolver","CardCreate","createHabit","formSchema","object","shape","name","string","required","matches","email","password","min","confirmPassword","oneOf","ref","register","handleSubmit","formState","errors","resolver","onSubmitFunction","data","setLogado","history","push","setObj","onSubmit"],"mappings":"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","sourcesContent":["import { StyleCardCreate } from \"./styles\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"../button/index\";\nimport { TextField } from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nconst CardCreate = ({ createHabit }) => {\n  const formSchema = yup.object().shape({\n    name: yup\n      .string()\n      .required(\"Nome obrigatório\")\n      .matches(\"[A-Z][a-z].* [A-Z][a-z].*\", \"Deve haver somente letras\"),\n    email: yup\n      .string()\n      .required(\"E-mail obrigatório\")\n      .matches(\n        \"^[a-z0-9][-_.+!#$%&'*/=?^`{|]{0,1}([a-z0-9][-_.+!#$%&'*/=?^`{|]{0,1})*[a-z0-9]@[a-z0-9][-.]{0,1}([a-z][-.]{0,1})*[a-z0-9].[a-z0-9]{1,}([.-]{0,1}[a-z]){0,}[a-z0-9]{0,}$\",\n        \"E-mail inválido\"\n      ),\n    password: yup\n      .string()\n      .required(\"Senha obrigatória\")\n      .min(8, \"A senha deve ter pelo menos 8 caracteres\")\n      .matches(\"(?=.*?[A-Z])\", \"Deve haver pelo menos uma letra maiúscula\")\n      .matches(\"(?=.*?[a-z])\", \"Deve haver pelo menos uma letra minúscula\")\n      .matches(\"(?=.*?[0-9])\", \"Deve haver pelo menos um dígito\")\n      .matches(\n        \"(?=.*?[#?!@$%^&*-])\",\n        \"Deve haver pelo menos um caractere especial\"\n      )\n      .matches(\".{8,}\", \"Deve haver no mínimo oito caracteres\"),\n    confirmPassword: yup\n      .string()\n      .required(\"Confirmação da senha obrigatória\")\n      .oneOf([yup.ref(\"password\"), null], \"As senhas devem corresponder\"),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(formSchema),\n  });\n\n  const onSubmitFunction = (data) => {\n    setLogado(true);\n    history.push(`/home/${data.name}`);\n    setObj(data);\n  };\n\n  return (\n    <StyleCardCreate>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <TextField {...register(\"title\")} label=\"Title\" type=\"text\"></TextField>\n        <TextField\n          {...register(\"category\")}\n          label=\"Category\"\n          type=\"text\"\n        ></TextField>\n        <TextField\n          {...register(\"difficulty\")}\n          label=\"Difficulty\"\n          type=\"text\"\n        ></TextField>\n        <TextField\n          {...register(\"frequency\")}\n          label=\"Frequency\"\n          type=\"text\"\n        ></TextField>\n        <TextField\n          {...register(\"how_much_achieved\")}\n          label=\"How much achieved\"\n          type=\"number\"\n        ></TextField>\n        <Button type=\"submit\"></Button>\n      </form>\n    </StyleCardCreate>\n  );\n};\n\nexport default CardCreate;\n"]},"metadata":{},"sourceType":"module"}